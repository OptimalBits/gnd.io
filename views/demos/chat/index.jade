link(href="/lib/ground/examples/list/bootstrap/css/bootstrap.min.css",rel="stylesheet",media="screen")
script(src="/socket.io/socket.io.js")
script
  curl = {
    packages: {
      'ground': {
        path: '/lib/ground/dist/',
        main: 'gnd',
        lib: ''
      }
    },
    paths : {
      underscore : '/lib/ground/third/underscore.js'
    }
  };

script(src="/lib/ground/third/curl.js")

<!-- Templates -->
script(type="text/template",id="main-template")
  #main
    .form-horizontal
      .control-group
        p(style="padding:0px")
          label(class="control-label", for="roomname") Room name:
        .controls
          input(type="text", id="roomname", placeholder="Room name",data-bind="value: newRoom.name")
          input(id="submit", type="submit", class="btn btn-small", value="Create new Chat Room", data-event="click: chat.onNewRoom")
    .navbar
      .navbar-inner
        ul(id="link",class="nav",style="padding:0px;margin:0px;")
          li(data-each="rooms: room")
            a(data-bind="attr: { href: room.url, title: room.name }")
              span(data-bind="text: room.name")
script(type="text/template", id="chatroom-template")
  #chatroom
    h3(data-bind="text:room.name", style="padding-bottom: 0px;");
    #history.well(style="overflow: auto;height: 100px;")
      p(data-each="messages : message",style="margin: 0px;color: #48484c;text-shadow: none;")
        small(data-bind="text: message.ts  | timeFormatter")
        small &nbsp;:&nbsp;
        small(data-bind="text: message.text")
    .form-horizontal
      .control-group
        .controls(style="margin: 0px;")
          input(id="msgbox", type="text", data-bind="value: currentMsg.text", data-event="keypress: room.onKeyPress")
          input(id="submit", type="submit", data-event="click: room.onSubmit",value="Send").btn.btn-small

script
  curl(['underscore'], function(_){
    curl(['ground'], function(Gnd){

      // Setup
      var socket = io.connect();
      socket.once('connect', function(){
        var storageLocal  = new Gnd.Storage.Local();
        var storageSocket = new Gnd.Storage.Socket(socket);
        var storageQueue  = new Gnd.Storage.Queue(storageLocal, storageSocket);
        var syncManager = new Gnd.Sync.Manager(socket);
        Gnd.Model.storageQueue = storageQueue;
        Gnd.Model.syncManager = syncManager;

        var Chat = Gnd.Model.extend('chats');
        var Room = Gnd.Model.extend('rooms');
        var Message = Gnd.Model.extend('messages');
        
        // Helper function to render templates
        function renderTemplate(tmplName,selector) {
          var template = _.template(Gnd.$('#' + tmplName)[0].innerHTML);
          Gnd.$(selector)[0].innerHTML = template();
        }

        // Routing
        Gnd.Route.listen(function(req) {
          req.get('', 'body', function() {
            renderTemplate('main-template','#chat-example');
            enterMain();
            req.get('room', 'body', function() {
              renderTemplate('chatroom-template','#chat-example-rooms');
              req.get(':roomid', '#chatroom', function() {
                enterRoom(req.params['roomid']);
              });
            });
          });
        });

        // get the chat instance from cache or server or create a new one
        function getChat(cb) {
          Chat.allModels(function(err, chats) {
            if(chats.length > 0){
              // cache hit
              cb(chats[0]);
            }else{
              // wait for a resync from server
              storageQueue.on('resync:chats', function(chats) {
                if(chats.length > 0){
                  Chat.findById(chats[0]._cid, function(err, chat) {
                    cb(chat);
                  });
                }else{
                  // no chat on server either => create new
                  var chat = new Chat();
                  chat.save();
                  cb(chat);
                }
              });
            }
          });
        }

        // Enter the main UI
        function enterMain() {
          getChat(function(chat){
            chat.keepSynced();

            // Create a room instance for the ViewModel
            var vmRoom = new Room({name: ''});
            
            // Get the rooms
            chat.all(Room, function(err, rooms){
              rooms.keepSynced();

              rooms.set('sortByFn',function(item){
                return item.ts;
              })
              rooms.sortOrder = 'asc';

              function createNewRoom() {
                var newRoom = new Room({name: vmRoom.get('name'), ts: Date.now()});

                // add the new room
                rooms.add(
                  newRoom,
                  function(err){
                    if(err) console.log(err); 
                  }
                );

                // Wait until we have a server id
                newRoom.on('id', function(id){
                  // construct the url
                  newRoom.set('url', '#/room/' + id);
                  newRoom.release();
                });

                vmRoom.set('name', '');
                // Focus on inputbox
                Gnd.Util.nextTick(function() {
                  Gnd.$('#roomname')[0].focus();
                });
              }

              chat.onNewRoom = createNewRoom;
              chat.onKeyPress = function(el, ev) {
                if(ev.which === 13) {
                  el.blur(); // to make sure that the ViewModel is updated
                  createNewRoom();
                }
              }

              // Create a ViewModel and bind it to the dom
              var viewModel = new Gnd.ViewModel(
                Gnd.$('#main')[0],
                {
                  newRoom: vmRoom,
                  rooms: rooms,
                  chat: chat
                }
              );
            });

          });
        }

        // Enter the chat room
        function enterRoom(roomId) {
          // Find the Room room
          Room.findById(roomId, function(err, room) {
            room.keepSynced();

            // Get the messages
            room.all(Message, function(err, messages){
              messages.keepSynced();

              // Create a message instance for the ViewModel
              var currentMsg = new Message({text: ''});

              function sendMessage() { 
                var newMsg = new Message({text : currentMsg.get('text'), ts: Date.now()}); 
                messages.add(
                  newMsg,
                  function(err){
                    if(err) console.log(err); 
                  }
                );
                newMsg.release();

                // Clear current message text
                currentMsg.set('text', '');

                // Set focus to inputbox
                Gnd.Util.nextTick(function() {
                  Gnd.$('#msgbox')[0].focus();
                });

                // move the history chat to the bottom
                Gnd.$('#history')[0].scrollTop = 10000;
              };

              // Create event handlers
              room.onSubmit = sendMessage;
              room.onKeyPress = function(el, ev) {
                if(ev.which === 13) {
                  el.blur(); // to make sure that the ViewModel is updated
                  sendMessage();
                }
              }

              // Create a ViewModel and bind it to the dom
              var viewModel = new Gnd.ViewModel(
                Gnd.$('#chatroom')[0],
                {
                  messages: messages,
                  currentMsg: currentMsg,
                  room: room
                },
                {
                  timeFormatter: function(timestamp){
                    var time = new Date(timestamp);
                    return '['+time.getHours() +':'+ time.getMinutes() +':'+ time.getSeconds()+']';
                  }
                }
              );
            });
          }); 
        }
      }); 
    });
  });
h1 Chat Example
#chat-example
#chat-example-rooms