link(href="/lib/ground/examples/list/bootstrap/css/bootstrap.min.css",rel="stylesheet",media="screen")
script(src="/socket.io/socket.io.js")
script
  curl = {
    packages: {
      'ground': {
         path: '/lib',
        main: 'gnd',
        lib: ''
      }
    }
  };

script(src="/lib/third/curl.js")
script(src="/lib/third/underscore.js")

<!-- Templates -->
script(type="text/template",id="main-template")
  #main
    .form-horizontal
      .control-group
        p(style="padding:0px")
          label(class="control-label", for="roomname") Room name:
        .controls
          input(type="text", id="roomname", placeholder="Room name",data-bind="value: newRoom.name", data-event="keypress: chat.onKeyPress")
          input(id="submit", type="submit", class="btn btn-small", value="Create new Chat Room", data-event="click: chat.onNewRoom")
    .navbar
      .navbar-inner(style="display: inline-block;")
        ul(id="link",class="nav",style="padding:0px;margin:0px;")
          li(data-each="rooms: room")
            a(data-bind="attr: { href: room.url, title: room.name | escape}")
              span(data-bind="text: room.name | escape")
script(type="text/template", id="chatroom-template")
  #chatroom
    h3(data-bind="text:room.name", style="padding-bottom: 0px;")
    #history.well(style="overflow: auto;height: 250px;")
      p(data-each="messages : message",style="margin: 0px;color: #48484c;text-shadow: none;")
        small(data-bind="text: message.ts | timeFormatter")
        small &nbsp;:&nbsp;
        small(data-bind="text: message.text | escape")
    .form-horizontal
      .control-group
        .controls(style="margin: 0px;")
          input(id="msgbox", type="text", data-bind="value: currentMsg.text", data-event="keypress: room.onKeyPress")
          input(id="submit", type="submit", data-event="click: room.onSubmit",value="Send").btn.btn-small

script
  curl(['ground'], function(Gnd){  
    //
    // Establish a socket.io connection.
    //
    var socket = io.connect();

    //
    // Configure the sync manager.
    //
    Gnd.use.syncManager(socket);

    //
    // Create Local and Remote storages
    //
    var storageLocal = new Gnd.Storage.Local();
    var storageSocket = new Gnd.Storage.Socket(socket);
    
    //
    // Configure the synchronization queue.
    //
    Gnd.use.storageQueue(storageLocal, storageSocket);
    
    //
    // Define Models
    //
    var MessageSchema = new Gnd.Schema({
      text: {type: String},
      ts: {type: Number}
    });
    var Message = Gnd.Model.extend('messages', MessageSchema);

    var RoomSchema = new Gnd.Schema({
      name : {type: String},
      ts: {type: Number},
      messages: new Gnd.CollectionSchemaType(Message, 'messages')
    });
    var Room = Gnd.Model.extend('rooms', RoomSchema);

    var ChatSchema = new Gnd.Schema({
      rooms: new Gnd.CollectionSchemaType(Room, 'rooms')
    });
    var Chat = Gnd.Model.extend('chats', ChatSchema);

    // Helper function to render templates into a DOM element
    function renderTemplate(tmplName, selector) {
      var template = _.template(Gnd.$('#' + tmplName)[0].innerHTML);
      // use $.text()
      Gnd.$(selector)[0].innerHTML = template();
    }

    // Routing
    Gnd.Route.listen(function(req) {
      req.get(function() {
        renderTemplate('main-template','#chat-example');
        enterMain();
        req.get('room', 'body', function() {
          renderTemplate('chatroom-template','#chat-example-rooms');
          req.get(':roomid', '#chatroom', function() {
            enterRoom(req.params['roomid']);
          });
        });
      });
    });

    // get the chat instance from cache or server or create a new one
    function getChat() {
      return Chat.all().then(function(chats){
        return chats.count ? chats.first().keepSynced() : Chat.create(true);
      });
    }

    // Enter the main UI
    function enterMain() {
      getChat().then(function(chat){
        chat.save();
        
        // Create a room instance as placeholder for the ViewModel
        var vmRoom = new Room({name: ''});
            
        // Get the rooms
        var rooms = chat.all(Room);
        
        rooms.set('sortByFn',function(item){
          return item.ts;
        })
        rooms.sortOrder = 'asc';

        function createNewRoom() {
          var newRoom = new Room({name: vmRoom.get('name'), ts: Date.now()});

          // add the new room
          rooms.add(newRoom);

          // Wait until we have a server id
          newRoom.on('id', function(id){
            // construct the url
            newRoom.set('url', '#/room/' + id);
            newRoom.release();
          });

          vmRoom.set('name', '');
          // Focus on inputbox
          Gnd.Util.nextTick(function() {
            Gnd.$('#roomname')[0].focus();
                  // Gnd.$('body')[0].scrollTop = Gnd.$('#chatroom')[0].offsetTop - 50 // Scroll to the chat box
            });
        }

        chat.onNewRoom = createNewRoom;
        chat.onKeyPress = function(el, ev) {
          if(ev.which === 13) {
            el.blur(); // to make sure that the ViewModel is updated
            createNewRoom();
          }
        }

        // Create a ViewModel and bind it to the dom
        var viewModel = new Gnd.ViewModel('#main', {
          newRoom: vmRoom,
          rooms: rooms,
          chat: chat
        }, {escape: _.escape});  
      });
    }

    // Enter the chat room
    function enterRoom(roomId) {
      // Find the Room room
      var room = Room.findById(roomId, true);

      // Get the messages
      var messages = room.all(Message)

      // Create a message instance placeholder for the ViewModel
      var currentMsg = new Message({text: ''});

      function sendMessage() {
        var newMsg = 
          new Message({text : currentMsg.get('text'), ts: Date.now()}); 
        
        messages.add(newMsg.autorelease());

        // Clear current message text
        currentMsg.set('text', '');

        // Set focus to inputbox
        Gnd.Util.nextTick(function() {
          Gnd.$('#msgbox')[0].focus();
        });

        // move the history chat to the bottom
        Gnd.$('#history')[0].scrollTop = 10000;
      };

      // Create event handlers
      room.onSubmit = sendMessage;
      room.onKeyPress = function(el, ev) {
        if(ev.which === 13) {
          el.blur(); // to make sure that the ViewModel is updated
          sendMessage();
        }
      }

      // Create a ViewModel and bind it to the dom
      var viewModel = new Gnd.ViewModel('#chatroom', {
          messages: messages,
          currentMsg: currentMsg,
          room: room
        }, {
          timeFormatter: function(timestamp){
            var time = new Date(timestamp);
            return '[' + time.toLocaleString() + ']';
          },
          escape: _.escape
      }); 
    }
  });
h1 Chat Example
#chat-example
#chat-example-rooms